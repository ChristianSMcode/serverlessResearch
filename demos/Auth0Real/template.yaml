AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Auth0Real

  Sample SAM Template for Auth0Real

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  createUser:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
        #This is to let api gateway use the AdministratorApp in auth0
        #Which uses the system API to make auth0 actions in the behalve of API gateway.
          DOMAIN: "ressolve.us.auth0.com"
          CLIENT_ID: "wPZkMbglCKYMMX2H8EN1WstSss71nqgP"
          CLIENT_SECRET: "AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46"
          RESSOLVE_ORG: "org_eC0hKpXoWjDqKAds"
      CodeUri: functions/userManagement/createUser
      Handler: createUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api 
          Properties:
            Path: /users/createUser
            Method: post
            RestApiId: !Ref Auth0Test

  createRootUser:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
          DOMAIN: "ressolve.us.auth0.com"
          CLIENT_ID: "wPZkMbglCKYMMX2H8EN1WstSss71nqgP"
          CLIENT_SECRET: "AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46"
      CodeUri: functions/userManagement/createRootUser
      Handler: createRootUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api 
          Properties:
            Path: /users/createRootUser
            Method: post
            RestApiId: !Ref Auth0Test

  deleteUser:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
          DOMAIN: "ressolve.us.auth0.com"
          CLIENT_ID: "6EZBNCtrEucWtf5xBaMI21jTHfimLfah"
          CLIENT_SECRET: "pCBvlVIZ7AMigU0DVNaYl9DZQNmpJALx1HxV9K3MLGZilUpLOUdXf0BK8zzfN7Eu"
          SCOPES: "read:users create:users update:users delete:users"
      CodeUri: functions/userManagement/deleteUser
      Handler: deleteUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api 
          Properties:
            Path: /users/deleteUser
            Method: post
            RestApiId: !Ref Auth0Test

  logIn:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
          DOMAIN: "ressolve.us.auth0.com"
          CLIENT_ID: "wPZkMbglCKYMMX2H8EN1WstSss71nqgP"
          CLIENT_SECRET: "AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46"
          AUDIENCE: "https://ressolveTestApi.com"
      CodeUri: functions/authentication/logIn/
      Handler: logIn.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api 
          Properties:
            Path: /users/logIn
            Method: post
            RestApiId: !Ref Auth0Test
  
  auth0:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/actions/auth0
      Handler: auth0.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api 
          Properties:
            Path: /actions/auth0
            Method: get
            RestApiId: !Ref Auth0Test
  
  authAuthorizer:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
          AUDIENCE: https://ressolveTestApi.com
          JWKS_URI: "https://ressolve.us.auth0.com/.well-known/jwks.json"
          TOKEN_ISSUER: "https://ressolve.us.auth0.com/"
      CodeUri: functions/authentication/authAuthorizer
      Handler: authAuthorizer.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
  
  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
  # Api definitions and resources
  Auth0Test:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: Auth0Test
      DefinitionBody:
        swagger: "2.0"
        info:
          title: Auth0Test-title
          version: '1'
        basePath: /Auth0Test
        schemes:
          - https
        securityDefinitions:
          Auth0Authorizer:
            type: apiKey
            name: Authorizationtoken
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerResultTtlInSeconds: 3600
              authorizerCredentials:
                Fn::GetAtt:
                  - AuthorizerRole
                  - Arn
              identityValidationExpression: "^Bearer [-0-9a-zA-z\\.]*$"
              authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authAuthorizer.Arn}/invocations
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            responseTemplates:
              application/json: '{"message": "Custom authorizer failed to authenticate"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_4XX:
            responseTemplates:
              application/json: '{"message": "400 error"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseTemplates:
              application/json: '{"message": "500 error"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        paths:
          /users/createUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createUser.Arn}/invocations
                httpMethod: POST
          
          /users/createRootUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createRootUser.Arn}/invocations
                httpMethod: POST
          
          /users/deleteUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
                - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteUser.Arn}/invocations
                httpMethod: POST
          
          /users/logIn:
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${logIn.Arn}/invocations
                httpMethod: POST
          
          /actions/auth0:
            options:
                consumes:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
                '400':
                  description: errorClient
                '500':
                  description: errorServer
              security:
                - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0.Arn}/invocations
                httpMethod: POST