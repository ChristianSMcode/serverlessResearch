AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Auth0Real

  Sample SAM Template for Auth0Real

  '
Globals:
  Function:
    Timeout: 30
    MemorySize: 128
Resources:
  createUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
          RESSOLVE_ORG: org_eC0hKpXoWjDqKAds
      CodeUri: s3://ressolve-research-gateway-auth0real/741eb4127b107557098fb458501a863e
      Handler: createUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/createUser
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: createUser
  createRootUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
      CodeUri: s3://ressolve-research-gateway-auth0real/8e61eb41d518facb0fb23e8d3be84d82
      Handler: createRootUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/createRootUser
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: createRootUser
  listUsers:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
      CodeUri: s3://ressolve-research-gateway-auth0real/30690317b9c2f11b8c1b547c4e8871cf
      Handler: listUsers.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/listUsers
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: listUsers
  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
          SCOPES: read:users create:users update:users delete:users
      CodeUri: s3://ressolve-research-gateway-auth0real/d16f5a212bd205c4a0152c9cb24cbf94
      Handler: deleteUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/deleteUser
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: deleteUser
  changePassword:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
      CodeUri: s3://ressolve-research-gateway-auth0real/4d4c88796aab0f2a4a39612ed0d320d7
      Handler: changePassword.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/changePassword
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: changePassword
  resetPassword:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
      CodeUri: s3://ressolve-research-gateway-auth0real/26c6df0b564a39cde3fc361286ccfea7
      Handler: resetPassword.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/resetPassword
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: resetPassword
  logIn:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: wPZkMbglCKYMMX2H8EN1WstSss71nqgP
          CLIENT_SECRET: AuNrgnLNSv5aDqz75FK6Sax7ebeldTKELDEg3GCpvroQgPScGfLYmzzYjXqTGw46
          AUDIENCE: https://ressolveTestApi.com
      CodeUri: s3://ressolve-research-gateway-auth0real/7c2f0505eb7d5da0c449296d81f7d233
      Handler: logIn.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /users/logIn
            Method: post
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: logIn
  auth0:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-auth0real/3aef7727e9029f2fbcba8d2ed71099b7
      Handler: auth0.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        RestApiEvent:
          Type: Api
          Properties:
            Path: /actions/auth0
            Method: get
            RestApiId:
              Ref: Auth0Test
    Metadata:
      SamResourceId: auth0
  authAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AUDIENCE: https://ressolveTestApi.com
          JWKS_URI: https://ressolve.us.auth0.com/.well-known/jwks.json
          TOKEN_ISSUER: https://ressolve.us.auth0.com/
      CodeUri: s3://ressolve-research-gateway-auth0real/908883a26140091694c2dbf101deac89
      Handler: authAuthorizer.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: authAuthorizer
  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
    Metadata:
      SamResourceId: AuthorizerRole
  authApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - '-'
        - - Ref: Auth0Test
          - auth0-logs
    Metadata:
      SamResourceId: authApiLogs
  Auth0Test:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - authApiLogs
          - Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller
          $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath
          $context.protocol" $context.status $context.responseLength $context.requestId
      Name: Auth0Test
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Auth0Test-title
          version: '1'
        basePath: /Auth0Test
        schemes:
        - https
        securityDefinitions:
          Auth0Authorizer:
            type: apiKey
            name: Authorizationtoken
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerResultTtlInSeconds: 3600
              authorizerCredentials:
                Fn::GetAtt:
                - AuthorizerRole
                - Arn
              identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authAuthorizer.Arn}/invocations
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            responseTemplates:
              application/json: '{"message": "Custom authorizer failed to authenticate"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
          DEFAULT_4XX:
            responseTemplates:
              application/json: '{"message": "400 error"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
          DEFAULT_5XX:
            responseTemplates:
              application/json: '{"message": "500 error"}'
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
              gatewayresponse.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        paths:
          /users/createUser:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createUser.Arn}/invocations
                httpMethod: POST
          /users/createRootUser:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createRootUser.Arn}/invocations
                httpMethod: POST
          /users/deleteUser:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteUser.Arn}/invocations
                httpMethod: POST
          /users/changePassword:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${changePassword.Arn}/invocations
                httpMethod: POST
          /users/listUsers:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listUsers.Arn}/invocations
                httpMethod: POST
          /users/resetPassword:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resetPassword.Arn}/invocations
                httpMethod: POST
          /users/logIn:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${logIn.Arn}/invocations
                httpMethod: POST
          /actions/auth0:
            options:
              consumes:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorizationtoken,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Header-Test'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
                '400':
                  description: errorClient
                '500':
                  description: errorServer
              security:
              - Auth0Authorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0.Arn}/invocations
                httpMethod: POST
    Metadata:
      SamResourceId: Auth0Test
