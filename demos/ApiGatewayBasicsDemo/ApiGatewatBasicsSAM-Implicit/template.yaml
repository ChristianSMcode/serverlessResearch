AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ApiGatewatBasicsSAM-Implicit

  Sample SAM Template for ApiGatewatBasicsSAM-Implicit

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  calculatorFunctionNonProxy:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Testing
      CodeUri: calculator/
      Handler: calculator.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        ApiEvent:
          Type: Api 
          Properties:
            Path: /calculate3/{operation}
            Method: POST
            RestApiId: !Ref ApiGatewayBasics
            #RequestParameters:
            #  - method.request.header.Header-Test
            #  - method.request.querystring.test
                    
  calculatorProxy:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: calculator2/
      Handler: calculator.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        ApiEvent:
          Type: Api 
          Properties:
            Path: /calculate2/{operation}
            Method: POST
            RestApiId: !Ref ApiGatewayBasics
  
  s3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  dynamoDB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  dynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cars
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH

  apiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref ApiGatewayBasics
          - access-logs

  ApiGatewayBasics:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApiGatewayBasics
      StageName: TestingGateway
      AccessLogSetting:
        DestinationArn: !GetAtt apiLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      DefinitionBody:
        swagger: "2.0"
        info:
          title: ApiGatewayBasics-title
          version: '1'
        basePath: /baseTestPath
        schemes:
          - https
        x-amazon-apigateway-request-validators:
          headerAndStringParams:
            validateRequestBody: false
            validateRequestParameters: true 
        paths:
          /calculate1/{operation}:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${calculatorFunctionNonProxy.Arn}/invocations
                httpMethod: POST
          
          /calculate2/{operation}:
            post:
              parameters:
                - name: test
                  in: query
                  type: string
                  required: true
                - name: Header-Test
                  in: header
                  type: string
                  required: true
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
                '400':
                  description: bad
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${calculatorProxy.Arn}/invocations
                httpMethod: POST
              x-amazon-apigateway-request-validator: headerAndStringParams
          
          /mockIntegration:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                  "400":
                    description: "400 response"
                x-amazon-apigateway-integration:
                  responses:
                    "4\\d{2}":
                      statusCode: "400"
                      responseTemplates:
                        application/json: "#set($body = $context.requestOverride.path.body)\r\
                          \n{\r\n    \"statusCode\": 400,\r\n    \"message\": \"The invoked\
                          \ method is not supported on the API resource.\",\r\n    \"metadata\"\
                          \ {\r\n        \"httpMethod\":$context.httpMethod,\r\n        \"body\"\
                          :$body,\r\n        \"custom\" : $input.params()\r\n        }\r\n}"
                    default:
                      statusCode: "200"
                      responseTemplates:
                        application/json: "#set($body = $context.requestOverride.path.body)\r\
                          \n{\r\n    \"statusCode\": 200,\r\n    \"message\": \"Go ahead without\
                          \ me\",\r\n    \"metadata\" {\r\n        \"httpMethod\":$context.httpMethod,\r\
                          \n        \"body\":$body,\r\n        \"custom\" : $input.params()\r\
                          \n    }\r\n}"
                  requestTemplates:
                    application/json: "#set($context.requestOverride.path.body = $input.body)\r\
                      \n{\r\n  #if( $input.params('scope') == \"internal\" )\r\n    \"statusCode\"\
                      : 200,\r\n  #else\r\n    \"statusCode\": 400,\r\n  #end\r\n}"
                  passthroughBehavior: "when_no_templates"
                  type: "mock"

          /httpIntegration:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: HTTP
                uri: https://jsonplaceholder.typicode.com/users
                httpMethod: GET
                responses:
                  default:
                    statusCode: 200
                  passthroughBehaviour: "when_no_match"
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: HTTP_PROXY
                uri: https://jsonplaceholder.typicode.com/posts
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
                  passthroughBehaviour: "when_no_match"
          
          /awsIntegration:
            get:
              parameters:
                - name: bucket
                  in: query
                  required: false
                  type: string
                - name: file
                  in: query
                  required: false
                  type: string
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: AWS
                credentials: !GetAtt s3Role.Arn
                uri:
                   Fn::Sub: arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{file}
                httpMethod: GET
                responses:
                    default:
                      statusCode: 200
                requestParameters:
                  integration.request.path.file: "method.request.querystring.file"
                  integration.request.path.bucket: "method.request.querystring.bucket"
                passthroughBehaviour: "when_no_match"
          
          /awsIntegration2:
            post:
              produces:
                - application/json
              parameters:
                - name: Bucket
                  in: query
                  required: true
                  type: string
              responses:
                '200':
                  description: 200 response
                '500':
                  description: 500 response
              x-amazon-apigateway-request-validator: headerAndStringParams
              x-amazon-apigateway-integration:
                type: "aws"
                requestParameters:
                  integration.request.path.Bucket: method.request.querystring.Bucket
                passthroughBehavior: "when_no_templates"
                credentials: !GetAtt s3Role.Arn
                uri:
                   Fn::Sub: "arn:aws:apigateway:${AWS::Region}:{Bucket}.s3:action/CreateBucket"
                httpMethod: PUT
                responses:
                  default:
                    statusCode: 200
          
          /dynamoIntegration:
              post:
                responses:
                  "200":
                    description: "200 response"
                x-amazon-apigateway-integration:
                  credentials: !GetAtt dynamoDB.Arn
                  httpMethod: "POST"
                  uri: 
                    Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
                  responses:
                    default:
                      statusCode: "200"
                  passthroughBehavior: "when_no_match"
                  type: "aws"



