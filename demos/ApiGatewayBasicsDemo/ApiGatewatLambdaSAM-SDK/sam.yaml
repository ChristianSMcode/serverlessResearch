AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ApiGatewatLambdaSAM-SDK

  Sample SAM Template for ApiGatewatLambdaSAM-SDK

  '
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
Resources:
  helloWorldInitial:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-sdk-demo/81725e5ae8b6d04f05d91c993761d6fd
      Handler: helloWorld.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloWorldInitial
            Method: get
            RestApiId:
              Ref: ApiInitial
    Metadata:
      SamResourceId: helloWorldInitial
  createAssignKey:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-sdk-demo/9e8a4054e83b65a167a2c41ce5814078
      Handler: createAssignKey.handler
      Role:
        Fn::GetAtt:
        - addCreateApiKeyFunctionRole
        - Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createAssignKey
            Method: post
            RestApiId:
              Ref: ApiInitial
    Metadata:
      SamResourceId: createAssignKey
  addCreateApiKeyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: api-gateway-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - apigateway:CREATE_API_KEY
            - apigateway:POST
            Resource:
            - arn:aws:apigateway:us-west-2::/apikeys
          - Effect: Allow
            Action:
            - apigateway:UPDATE
            - apigateway:PUT
            - apigateway:POST
            Resource:
            - arn:aws:apigateway:us-west-2::/usageplans/*/keys
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: addCreateApiKeyFunctionRole
  helloWorldMain:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-sdk-demo/81725e5ae8b6d04f05d91c993761d6fd
      Handler: helloWorld.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloWorldMain
            Method: get
            RestApiId:
              Ref: ApiMain
    Metadata:
      SamResourceId: helloWorldMain
  DefaultUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId:
          Ref: ApiMain
        Stage:
          Ref: ApiMain.Stage
      UsagePlanName: DefaultUsagePlan
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
    Metadata:
      SamResourceId: DefaultUsagePlan
  ApiInitial:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiInitial
      DefinitionBody:
        swagger: '2.0'
        info:
          title: ApiInitial-title
          version: '1'
        basePath: /ApiInitial
        schemes:
        - https
        paths:
          /helloWorldInitial:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldInitial.Arn}/invocations
                httpMethod: POST
          /createAssignKey:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createAssignKey.Arn}/invocations
                httpMethod: POST
    Metadata:
      SamResourceId: ApiInitial
  ApiMain:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiMain
      DefinitionBody:
        swagger: '2.0'
        info:
          title: ApiMain-title
          version: '1'
        basePath: /ApiMain
        schemes:
        - https
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /helloWorldMain:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldMain.Arn}/invocations
                httpMethod: POST
    Metadata:
      SamResourceId: ApiMain
