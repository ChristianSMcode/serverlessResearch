AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ApiGatewatLambdaSAM-SDK

  Sample SAM Template for ApiGatewatLambdaSAM-SDK

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  helloWorldInitial:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/helloWorld/
      Handler: helloWorld.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /helloWorldInitial
            Method: get
            RestApiId: !Ref ApiInitial

  createAssignKey:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/createAssignKey/
      Handler: createAssignKey.handler
      Role: !GetAtt addCreateApiKeyFunctionRole.Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /createAssignKey
            Method: post
            RestApiId: !Ref ApiInitial

  addCreateApiKeyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: api-gateway-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:CREATE_API_KEY
                  - apigateway:POST
                Resource:
                  - arn:aws:apigateway:us-west-2::/apikeys
              - Effect: Allow
                Action:
                  - apigateway:UPDATE
                  - apigateway:PUT
                  - apigateway:POST
                Resource:
                  - arn:aws:apigateway:us-west-2::/usageplans/*/keys
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  helloWorldMain:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/helloWorld/
      Handler: helloWorld.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloWorldMain
            Method: get
            RestApiId: !Ref ApiMain
 
  DefaultUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ApiMain
          Stage: !Ref ApiMain.Stage
      UsagePlanName: DefaultUsagePlan
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  ApiInitial:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiInitial
      DefinitionBody:
        swagger: "2.0"
        info:
          title: ApiInitial-title
          version: '1'
        basePath: /ApiInitial
        schemes:
          - https
        paths:
          /helloWorldInitial:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldInitial.Arn}/invocations
                httpMethod: POST

          /createAssignKey:
              post:
                consumes:
                - application/json
                produces:
                - application/json
                responses:
                  '200':
                    description: ok
                x-amazon-apigateway-integration:
                  type: aws_proxy
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createAssignKey.Arn}/invocations
                  httpMethod: POST


  ApiMain:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiMain
      DefinitionBody:
        swagger: "2.0"
        info:
          title: ApiMain-title
          version: '1'
        basePath: /ApiMain
        schemes:
          - https
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /helloWorldMain:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldMain.Arn}/invocations
                httpMethod: POST

