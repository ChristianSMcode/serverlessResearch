AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ApiGatewatAuth

  Sample SAM Template for ApiGatewatAuth

  '
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
Resources:
  HelloWorldAuth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/6e4902634676c9a099e86bad0e53c2b3
      Handler: helloWorldAuth.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: HelloWorldAuth
  HelloWorldAuthIAM:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/a411a61f34f65842b7b5fc00d8908169
      Handler: HelloWorldAuthIAM.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloIAM
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: HelloWorldAuthIAM
  helloWorldCognito:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/38a071b6b007a80efed93d6e37c082c0
      Handler: helloWorldCognito.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloWorldCognito
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: helloWorldCognito
  createCognitoUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/770f57de6eaef8a8ad1f477f22b1cada
      Handler: createCognitoUser.lambdaHandler
      Role:
        Fn::GetAtt:
        - cognitoRole
        - Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /createCognitoUser
            Method: post
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: createCognitoUser
  logInCognito:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/19123a4bd92fa9ea038b500016f3824c
      Handler: logIn.lambdaHandler
      Role:
        Fn::GetAtt:
        - cognitoRole
        - Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /logInCognito
            Method: post
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: logInCognito
  auth0CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: 6EZBNCtrEucWtf5xBaMI21jTHfimLfah
          CLIENT_SECRET: pCBvlVIZ7AMigU0DVNaYl9DZQNmpJALx1HxV9K3MLGZilUpLOUdXf0BK8zzfN7Eu
          SCOPES: read:users create:users update:users delete:users
      CodeUri: s3://ressolve-research-gateway-openauth-demo/f06fc7c548aa0550d7b6c665137c0371
      Handler: auth0CreateUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /auth0CreateUser
            Method: post
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: auth0CreateUser
  auth0LogInUser:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DOMAIN: ressolve.us.auth0.com
          CLIENT_ID: 6EZBNCtrEucWtf5xBaMI21jTHfimLfah
          CLIENT_SECRET: pCBvlVIZ7AMigU0DVNaYl9DZQNmpJALx1HxV9K3MLGZilUpLOUdXf0BK8zzfN7Eu
          SCOPES: read:users create:users update:users delete:users
      CodeUri: s3://ressolve-research-gateway-openauth-demo/9a946c2d999095548b17377ae94ff796
      Handler: auth0LogInUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /auth0LogInUser
            Method: post
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: auth0LogInUser
  helloAuth0:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/6e4902634676c9a099e86bad0e53c2b3
      Handler: helloWorldAuth.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloAuth0
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: helloAuth0
  auth0Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          AUDIENCE: https://ea4fslddvh.execute-api.us-west-2.amazonaws.com
          JWKS_URI: https://ressolve.us.auth0.com/.well-known/jwks.json
          TOKEN_ISSUER: https://ressolve.us.auth0.com/
      CodeUri: s3://ressolve-research-gateway-openauth-demo/656d5d7fd2d87da430ae27cb4b135afd
      Handler: auth0Authorizer.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
    Metadata:
      SamResourceId: auth0Authorizer
  authAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
    Metadata:
      SamResourceId: authAuthorizerRole
  cognitoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: api-gateway-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:*
            Resource:
            - Fn::GetAtt:
              - cogUser
              - Arn
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: cognitoRole
  callerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: callerUser
    Metadata:
      SamResourceId: callerUser
  callerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: callerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - execute-api:Invoke
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:*:${ApiAuthOpen}/testing/GET/helloIAM
      Users:
      - Ref: callerUser
    Metadata:
      SamResourceId: callerPolicy
  cogUser:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: authCognito
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
      - Name: email
        Required: true
        AttributeDataType: String
        Mutable: true
      - Name: given_name
        Required: true
        AttributeDataType: String
        Mutable: true
      - Name: family_name
        Required: true
        AttributeDataType: String
        Mutable: true
    Metadata:
      SamResourceId: cogUser
  AuthAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: cogUser
    Metadata:
      SamResourceId: AuthAppClient
  ApiAuthOpen:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiAuthOpen
      DefinitionBody:
        swagger: '2.0'
        info:
          title: ApiAuthOpen-title
          version: '1'
        basePath: /ApiAuthOpen
        schemes:
        - https
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
          ApiCognitoAuthorizerv2:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
              - Fn::GetAtt:
                - cogUser
                - Arn
          Auth0AuthorizerCustom:
            type: apiKey
            name: authorizationToken
            in: header
            x-amazon-apigateway-authtype: custom
            x-amazon-apigateway-authorizer:
              type: token
              authorizerResultTtlInSeconds: 3600
              authorizerCredentials:
                Fn::GetAtt:
                - authAuthorizerRole
                - Arn
              identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0Authorizer.Arn}/invocations
        paths:
          /hello:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuth.Arn}/invocations
                httpMethod: POST
          /helloIAM:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuthIAM.Arn}/invocations
                httpMethod: POST
          /helloWorldCognito:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - ApiCognitoAuthorizerv2: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldCognito.Arn}/invocations
                httpMethod: POST
          /createCognitoUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCognitoUser.Arn}/invocations
                httpMethod: POST
          /logInCognito:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${logInCognito.Arn}/invocations
                httpMethod: POST
          /auth0CreateUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0CreateUser.Arn}/invocations
                httpMethod: POST
          /auth0LogInUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0LogInUser.Arn}/invocations
                httpMethod: POST
          /helloAuth0:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
              - Auth0AuthorizerCustom: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloAuth0.Arn}/invocations
                httpMethod: POST
    Metadata:
      SamResourceId: ApiAuthOpen
