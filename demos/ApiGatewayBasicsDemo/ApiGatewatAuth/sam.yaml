AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ApiGatewatAuth

  Sample SAM Template for ApiGatewatAuth

  '
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
Resources:
  HelloWorldAuth:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/6e4902634676c9a099e86bad0e53c2b3
      Handler: helloWorldAuth.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: HelloWorldAuth
  HelloWorldAuthIAM:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ressolve-research-gateway-openauth-demo/a411a61f34f65842b7b5fc00d8908169
      Handler: HelloWorldAuthIAM.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /helloIAM
            Method: get
            RestApiId:
              Ref: ApiAuthOpen
    Metadata:
      SamResourceId: HelloWorldAuthIAM
  callerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: callerUser
    Metadata:
      SamResourceId: callerUser
  callerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: callerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - execute-api:Invoke
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:*:${ApiAuthOpen}/testing/GET/helloIAM
      Users:
      - Ref: callerUser
    Metadata:
      SamResourceId: callerPolicy
  ApiAuthOpen:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiAuthOpen
      DefinitionBody:
        swagger: '2.0'
        info:
          title: ApiAuthOpen-title
          version: '1'
        basePath: /ApiAuthOpen
        schemes:
        - https
        paths:
          /hello:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuth.Arn}/invocations
                httpMethod: POST
          /helloIAM:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-auth:
                type: AWS_IAM
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuthIAM.Arn}/invocations
                httpMethod: POST
    Metadata:
      SamResourceId: ApiAuthOpen
