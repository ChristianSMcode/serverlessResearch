AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ApiGatewatAuth

  Sample SAM Template for ApiGatewatAuth

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Resources:
  HelloWorldAuth:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/hello-world/
      Handler: helloWorldAuth.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ApiAuthOpen

  HelloWorldAuthIAM:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/HelloWorldAuthIAM/
      Handler: HelloWorldAuthIAM.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloIAM
            Method: get
            RestApiId: !Ref ApiAuthOpen
  
  helloWorldCognito:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/helloWorldCognito/
      Handler: helloWorldCognito.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloWorldCognito
            Method: get
            RestApiId: !Ref ApiAuthOpen

  createCognitoUser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/createCognitoUser/
      Handler: createCognitoUser.lambdaHandler
      Role: !GetAtt cognitoRole.Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /createCognitoUser
            Method: post
            RestApiId: !Ref ApiAuthOpen

  logInCognito:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/logIn/
      Handler: logIn.lambdaHandler
      Role: !GetAtt cognitoRole.Arn
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /logInCognito
            Method: post
            RestApiId: !Ref ApiAuthOpen

  auth0CreateUser:
    Type: AWS::Serverless::Function 
    Properties:
      Environment:
        Variables:
          DOMAIN: "ressolve.us.auth0.com"
          CLIENT_ID: "6EZBNCtrEucWtf5xBaMI21jTHfimLfah"
          CLIENT_SECRET: "pCBvlVIZ7AMigU0DVNaYl9DZQNmpJALx1HxV9K3MLGZilUpLOUdXf0BK8zzfN7Eu"
          SCOPES: "read:users create:users update:users delete:users"
      CodeUri: functions/auth0CreateUser/
      Handler: auth0CreateUser.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /auth0CreateUser
            Method: post
            RestApiId: !Ref ApiAuthOpen

  cognitoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: api-gateway-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource:
                  - !GetAtt cogUser.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  callerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: callerUser

  callerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: callerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - execute-api:Invoke
            Resource:
              - !Sub "arn:aws:execute-api:${AWS::Region}:*:${ApiAuthOpen}/testing/GET/helloIAM"
      Users:
        - !Ref callerUser
  
  cogUser:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: authCognito
      UsernameAttributes: #List of attributes atribute can be used as username when logging in
        - email 
      AutoVerifiedAttributes: #This attributes will be verified automatically while signing in
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: email
          Required: true
          AttributeDataType: String
          Mutable: true
        - Name: given_name
          Required: true
          AttributeDataType: String
          Mutable: true
        - Name: family_name
          Required: true
          AttributeDataType: String
          Mutable: true

  AuthAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref cogUser
  
  ApiAuthOpen:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiAuthOpen
      #General auth type of the api (can be overwritten at method level)
      #Auth:
      #  DefaultAuthorizer: AWS_IAM
      DefinitionBody:
        swagger: "2.0"
        info:
          title: ApiAuthOpen-title
          version: '1'
        basePath: /ApiAuthOpen
        schemes:
          - https
        # The advantage of this is that we could specify which signatures we want to allow
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
          ApiCognitoAuthorizerv2:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !GetAtt cogUser.Arn
        paths:
          /hello:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuth.Arn}/invocations
                httpMethod: POST
          
          /helloIAM:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
                - sigv4: []
              #Most simple way to implement AWS_IAM auth only available with SAM
              #x-amazon-apigateway-auth:
              #  type: AWS_IAM
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuthIAM.Arn}/invocations
                httpMethod: POST

          /helloWorldCognito:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              security:
                - ApiCognitoAuthorizerv2: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${helloWorldCognito.Arn}/invocations
                httpMethod: POST

          /createCognitoUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createCognitoUser.Arn}/invocations
                httpMethod: POST

          /logInCognito:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${logInCognito.Arn}/invocations
                httpMethod: POST
          
          /auth0CreateUser:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${auth0CreateUser.Arn}/invocations
                httpMethod: POST
