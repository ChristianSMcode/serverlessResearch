AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ApiGatewatAuth

  Sample SAM Template for ApiGatewatAuth

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  HelloWorldAuth:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/hello-world/
      Handler: helloWorldAuth.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ApiAuthOpen

  HelloWorldAuthIAM:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/HelloWorldAuthIAM/
      Handler: HelloWorldAuthIAM.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloIAM
            Method: get
            RestApiId: !Ref ApiAuthOpen
  
  callerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: callerUser

  callerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: callerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - execute-api:Invoke
            Resource:
              - !Sub "arn:aws:execute-api:${AWS::Region}:*:${ApiAuthOpen}/testing/GET/helloIAM"
      Users:
        - !Ref callerUser
  
  ApiAuthOpen:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
      Name: ApiAuthOpen
      #General auth type of the api (can be overwritten at method level)
      #Auth:
      #  DefaultAuthorizer: AWS_IAM
      DefinitionBody:
        swagger: "2.0"
        info:
          title: ApiAuthOpen-title
          version: '1'
        basePath: /ApiAuthOpen
        schemes:
          - https
        # The advantage of this is that we could specify which signatures we want to allow
        #securityDefinitions:
        #  sigv4:
        #    type: apiKey
        #    name: Authorization
        #    in: header
        #    x-amazon-apigateway-authtype: awsSigv4
        paths:
          /hello:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuth.Arn}/invocations
                httpMethod: POST
          
          /helloIAM:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: ok
              #security:
              #  - sigv4: []
              #Most simple way to implement AWS_IAM auth only available with SAM
              x-amazon-apigateway-auth:
                type: AWS_IAM
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldAuthIAM.Arn}/invocations
                httpMethod: POST

